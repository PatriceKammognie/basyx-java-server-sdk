/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.eclipse.digitaltwin.basyx.submodelregistry.service.api;

import org.eclipse.digitaltwin.basyx.submodelregistry.model.Result;
import org.eclipse.digitaltwin.basyx.submodelregistry.model.ServiceDescription;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-18T15:01:47.322351200+02:00[Europe/Berlin]")
@Validated
@Controller
@Tag(name = "Submodel Registry", description = "the Submodel Registry API")
public interface DescriptionApi {

    default DescriptionApiDelegate getDelegate() {
        return new DescriptionApiDelegate() {};
    }

    /**
     * GET /description : Returns the self-describing information of a network resource (ServiceDescription)
     *
     * @return Requested Description (status code 200)
     *         or Forbidden (status code 403)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "getDescription",
        summary = "Returns the self-describing information of a network resource (ServiceDescription)",
        tags = { "Submodel Registry" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested Description", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceDescription.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/description",
        produces = { "application/json" }
    )
    default ResponseEntity<ServiceDescription> getDescription(
        
    ) {
        return getDelegate().getDescription();
     }

}
