diff --git a/.gitignore b/.gitignore
index f1800ce..0635d73 100644
--- a/.gitignore
+++ b/.gitignore
@@ -31,7 +31,7 @@ local.properties
 .settings/
 .loadpath
 .recommenders
-META-INF/*
+**/META-INF/*
 
 # External tool builders
 .externalToolBuilders/
@@ -77,4 +77,9 @@ META-INF/*
 .scala_dependencies
 .worksheet
 
-.moquette_uuid
\ No newline at end of file
+.moquette_uuid
+
+# generated API files
+**/open-api/Plattform_i40-Registry-and-Discovery.yaml
+**/open-api/Plattform_i40-SubmodelRegistry-and-Discovery.yaml
+**/open-api/temporary-extensions-result-file.yaml
\ No newline at end of file
diff --git a/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepository.java b/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepository.java
index 95f1ca5..5898457 100644
--- a/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepository.java
+++ b/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepository.java
@@ -37,7 +37,6 @@ import org.eclipse.digitaltwin.basyx.aasservice.AasServiceFactory;
 import org.eclipse.digitaltwin.basyx.core.exceptions.CollidingIdentifierException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.ElementDoesNotExistException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.IdentificationMismatchException;
-import org.springframework.beans.factory.annotation.Value;
 
 /**
  * In-memory implementation of the AasRepository
@@ -51,7 +50,6 @@ public class InMemoryAasRepository implements AasRepository {
 
 	private AasServiceFactory aasServiceFactory;
 	
-	@Value("${basyx.aasrepo.name:aas-repo}")
 	private String aasRepositoryName;
 	
 	/**
@@ -62,6 +60,18 @@ public class InMemoryAasRepository implements AasRepository {
 	public InMemoryAasRepository(AasServiceFactory aasServiceFactory) {
 		this.aasServiceFactory = aasServiceFactory;
 	}
+	
+	/**
+	 * Creates the AasRepository using an in-memory backend.
+	 * 
+	 * @param aasServiceFactory Used for creating the AasService for new AAS
+	 * @param aasRepositoryName Name of the AASRepository
+	 */
+	public InMemoryAasRepository(AasServiceFactory aasServiceFactory, String aasRepositoryName) {
+		this(aasServiceFactory);
+		
+		this.aasRepositoryName = aasRepositoryName;
+	}
 
 	@Override
 	public List<AssetAdministrationShell> getAllAas() {
@@ -142,7 +152,7 @@ public class InMemoryAasRepository implements AasRepository {
 	
 	@Override
 	public String getName() {
-		return aasRepositoryName;
+		return aasRepositoryName == null ? AasRepository.super.getName() : aasRepositoryName;
 	}
 	
 	private void throwIfMismatchingIds(String aasId, AssetAdministrationShell newAas) {
diff --git a/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepositoryFactory.java b/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepositoryFactory.java
index 75174c5..4cb7129 100644
--- a/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepositoryFactory.java
+++ b/basyx.aasrepository/basyx.aasrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/InMemoryAasRepositoryFactory.java
@@ -26,6 +26,7 @@ package org.eclipse.digitaltwin.basyx.aasrepository;
 
 import org.eclipse.digitaltwin.basyx.aasservice.AasServiceFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.stereotype.Component;
 
@@ -39,6 +40,9 @@ import org.springframework.stereotype.Component;
 public class InMemoryAasRepositoryFactory implements AasRepositoryFactory {
 
 	private AasServiceFactory aasApiFactory;
+	
+	@Value("${basyx.aasrepo.name:aas-repo}")
+	private String aasRepositoryName;
 
 	@Autowired
 	public InMemoryAasRepositoryFactory(AasServiceFactory aasApiFactory) {
@@ -47,6 +51,7 @@ public class InMemoryAasRepositoryFactory implements AasRepositoryFactory {
 
 	@Override
 	public AasRepository create() {
-		return new InMemoryAasRepository(aasApiFactory);
+		return new InMemoryAasRepository(aasApiFactory, aasRepositoryName);
 	}
+
 }
diff --git a/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepository.java b/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepository.java
index 18d8060..8269928 100644
--- a/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepository.java
+++ b/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepository.java
@@ -34,7 +34,6 @@ import org.eclipse.digitaltwin.basyx.aasservice.AasServiceFactory;
 import org.eclipse.digitaltwin.basyx.core.exceptions.CollidingIdentifierException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.ElementDoesNotExistException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.IdentificationMismatchException;
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.data.mongodb.core.MongoTemplate;
 import org.springframework.data.mongodb.core.index.TextIndexDefinition;
 import org.springframework.data.mongodb.core.query.Criteria;
@@ -55,8 +54,6 @@ public class MongoDBAasRepository implements AasRepository {
 	private MongoTemplate mongoTemplate;
 	private String collectionName;
 	private AasServiceFactory aasServiceFactory;
-	
-	@Value("${basyx.aasrepo.name:aas-repo}")
 	private String aasRepositoryName;
 
 	public MongoDBAasRepository(MongoTemplate mongoTemplate, String collectionName, AasServiceFactory aasServiceFactory) {
@@ -65,6 +62,12 @@ public class MongoDBAasRepository implements AasRepository {
 		this.aasServiceFactory = aasServiceFactory;
 		configureIndexForAasId(mongoTemplate);
 	}
+	
+	public MongoDBAasRepository(MongoTemplate mongoTemplate, String collectionName, AasServiceFactory aasServiceFactory, String aasRepositoryName) {
+		this(mongoTemplate, collectionName, aasServiceFactory);
+		
+		this.aasRepositoryName = aasRepositoryName;
+	}
 
 	private void configureIndexForAasId(MongoTemplate mongoTemplate) {
 		TextIndexDefinition idIndex = TextIndexDefinition.builder().onField(IDJSONPATH).build();
@@ -151,7 +154,7 @@ public class MongoDBAasRepository implements AasRepository {
 	
 	@Override
 	public String getName() {
-		return aasRepositoryName;
+		return aasRepositoryName == null ? AasRepository.super.getName() : aasRepositoryName;
 	}
 
 	private AasService getAasService(String aasId) {
diff --git a/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepositoryFactory.java b/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepositoryFactory.java
index 8e777c3..d3dc0c8 100644
--- a/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepositoryFactory.java
+++ b/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/MongoDBAasRepositoryFactory.java
@@ -23,7 +23,6 @@
  * SPDX-License-Identifier: MIT
  ******************************************************************************/
 
-
 package org.eclipse.digitaltwin.basyx.aasrepository;
 
 import org.eclipse.digitaltwin.basyx.aasservice.AasServiceFactory;
@@ -44,9 +43,14 @@ public class MongoDBAasRepositoryFactory implements AasRepositoryFactory {
 	private MongoTemplate mongoTemplate;
 	private String collectionName;
 	private AasServiceFactory aasServiceFactory;
+	
+	@Value("${basyx.smrepo.name:sm-repo}")
+	private String aasRepositoryName;
 
 	@Autowired
-	public MongoDBAasRepositoryFactory(MongoTemplate mongoTemplate, @Value("${basyx.aasrepository.mongodb.collectionName:aas-repo}") String collectionName, AasServiceFactory aasServiceFactory) {
+	public MongoDBAasRepositoryFactory(MongoTemplate mongoTemplate,
+			@Value("${basyx.aasrepository.mongodb.collectionName:aas-repo}") String collectionName,
+			AasServiceFactory aasServiceFactory) {
 		this.mongoTemplate = mongoTemplate;
 		this.collectionName = collectionName;
 		this.aasServiceFactory = aasServiceFactory;
@@ -54,6 +58,6 @@ public class MongoDBAasRepositoryFactory implements AasRepositoryFactory {
 
 	@Override
 	public AasRepository create() {
-		return new MongoDBAasRepository(mongoTemplate, collectionName, aasServiceFactory);
+		return new MongoDBAasRepository(mongoTemplate, collectionName, aasServiceFactory, aasRepositoryName);
 	}
 }
diff --git a/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBAasRepository.java b/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBAasRepository.java
index bbc7908..acd7182 100644
--- a/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBAasRepository.java
+++ b/basyx.aasrepository/basyx.aasrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBAasRepository.java
@@ -50,7 +50,7 @@ public class TestMongoDBAasRepository extends AasRepositorySuite {
 
 	@Override
 	protected AasRepositoryFactory getAasRepositoryFactory() {
-		String connectionURL = "mongodb://mongoAdmin:mongoPassword@localhost:27017/";
+		String connectionURL = "mongodb://localhost:27017";
 		MongoClient client = MongoClients.create(connectionURL);
 		MongoTemplate template = new MongoTemplate(client, "BaSyxTestDb");
 
diff --git a/basyx.aasrepository/basyx.aasrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/AasRepository.java b/basyx.aasrepository/basyx.aasrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/AasRepository.java
index 00b3544..23aa943 100644
--- a/basyx.aasrepository/basyx.aasrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/AasRepository.java
+++ b/basyx.aasrepository/basyx.aasrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/AasRepository.java
@@ -40,6 +40,7 @@ import org.eclipse.digitaltwin.basyx.core.exceptions.ElementDoesNotExistExceptio
  *
  */
 public interface AasRepository {
+	
 	/**
 	 * Retrieves all Asset Administration Shells from the repository
 	 * 
@@ -123,6 +124,8 @@ public interface AasRepository {
 	/**
 	 * Returns the name of the AAS repository
 	 */
-	public String getName();
+	public default String getName() {
+		return "aas-repo";
+	}
 	
 }
diff --git a/basyx.aasrepository/basyx.aasrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/feature/mqtt/MqttAasRepository.java b/basyx.aasrepository/basyx.aasrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/feature/mqtt/MqttAasRepository.java
index c8358e8..4e9d6f3 100644
--- a/basyx.aasrepository/basyx.aasrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/feature/mqtt/MqttAasRepository.java
+++ b/basyx.aasrepository/basyx.aasrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/feature/mqtt/MqttAasRepository.java
@@ -41,7 +41,6 @@ import org.eclipse.paho.client.mqttv3.MqttMessage;
 import org.eclipse.paho.client.mqttv3.MqttPersistenceException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Value;
 
 /**
  * Observer for the AASAggregator that triggers MQTT events for different
@@ -56,9 +55,6 @@ public class MqttAasRepository implements AasRepository {
 
 	private AasRepository decorated;
 	private IMqttClient mqttClient;
-	
-	@Value("${basyx.aasrepo.name:aas-repo}")
-	private String aasRepositoryName;
 
 	public MqttAasRepository(AasRepository decorated, IMqttClient mqttClient, MqttAasRepositoryTopicFactory topicFactory) {
 		this.topicFactory = topicFactory;
@@ -97,7 +93,7 @@ public class MqttAasRepository implements AasRepository {
 
 	@Override
 	public String getName() {
-		return aasRepositoryName;
+		return decorated.getName();
 	}
 
 	@Override
diff --git a/basyx.aasrepository/basyx.aasrepository.component/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/component/AasRepositoryConfiguration.java b/basyx.aasrepository/basyx.aasrepository.component/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/component/AasRepositoryConfiguration.java
index 3c2393a..8bde53b 100644
--- a/basyx.aasrepository/basyx.aasrepository.component/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/component/AasRepositoryConfiguration.java
+++ b/basyx.aasrepository/basyx.aasrepository.component/src/main/java/org/eclipse/digitaltwin/basyx/aasrepository/component/AasRepositoryConfiguration.java
@@ -48,7 +48,7 @@ import org.springframework.context.annotation.Primary;
  */
 @Configuration
 public class AasRepositoryConfiguration {
-	@Primary
+	
 	@Bean
 	public static AasRepository getAasRepository(AasRepositoryFactory aasRepositoryFactory, List<AasRepositoryFeature> features) {
 		return new DecoratedAasRepositoryFactory(aasRepositoryFactory, features).create();
diff --git a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepository.java b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepository.java
index 4aac193..f5c12eb 100644
--- a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepository.java
+++ b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepository.java
@@ -39,7 +39,6 @@ import org.eclipse.digitaltwin.aas4j.v3.model.Reference;
 import org.eclipse.digitaltwin.basyx.core.exceptions.CollidingIdentifierException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.ElementDoesNotExistException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.IdentificationMismatchException;
-import org.springframework.beans.factory.annotation.Value;
 
 /**
  * In-memory implementation of the ConceptDescriptionRepository
@@ -51,7 +50,6 @@ public class InMemoryConceptDescriptionRepository implements ConceptDescriptionR
 
 	private Map<String, ConceptDescription> conceptDescriptions = new LinkedHashMap<>();
 	
-	@Value("${basyx.cdrepo.name:cd-repo}")
 	private String cdRepositoryName;
 	
 	/**
@@ -59,6 +57,15 @@ public class InMemoryConceptDescriptionRepository implements ConceptDescriptionR
 	 * 
 	 */
 	public InMemoryConceptDescriptionRepository() { }
+	
+	/**
+	 * Creates the InMemoryConceptDescriptionRepository
+	 * 
+	 * @param cdRepositoryName Name of the CDRepository
+	 */
+	public InMemoryConceptDescriptionRepository(String cdRepositoryName) {
+		this.cdRepositoryName = cdRepositoryName;
+	}
 
 	/**
 	 * Creates the InMemoryConceptDescriptionRepository and preconfiguring
@@ -71,6 +78,18 @@ public class InMemoryConceptDescriptionRepository implements ConceptDescriptionR
 
 	    this.conceptDescriptions.putAll(mapConceptDescriptions(conceptDescriptions));
 	}
+	
+	/**
+	 * Creates the InMemoryConceptDescriptionRepository and preconfiguring
+	 * it with the passed ConceptDescriptions
+	 * 
+	 * @param conceptDescriptions
+	 * @param cdRepositoryName
+	 */
+	public InMemoryConceptDescriptionRepository(Collection<ConceptDescription> conceptDescriptions, String cdRepositoryName) {
+		this(conceptDescriptions);
+		this.cdRepositoryName = cdRepositoryName;
+	}
 
 	@Override
 	public Collection<ConceptDescription> getAllConceptDescriptions() {
@@ -125,7 +144,7 @@ public class InMemoryConceptDescriptionRepository implements ConceptDescriptionR
 	
 	@Override
 	public String getName() {
-		return cdRepositoryName;
+		return cdRepositoryName == null ? ConceptDescriptionRepository.super.getName() : cdRepositoryName;
 	}
 
 	private static void assertIdUniqueness(Collection<ConceptDescription> conceptDescriptionsToCheck) {
diff --git a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepositoryFactory.java b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepositoryFactory.java
index dbd921e..c956f0d 100644
--- a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepositoryFactory.java
+++ b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/InMemoryConceptDescriptionRepositoryFactory.java
@@ -24,6 +24,7 @@
 
 package org.eclipse.digitaltwin.basyx.conceptdescriptionrepository;
 
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.stereotype.Component;
 
@@ -35,10 +36,13 @@ import org.springframework.stereotype.Component;
 @Component
 @ConditionalOnExpression("'${basyx.backend}'.equals('InMemory')")
 public class InMemoryConceptDescriptionRepositoryFactory implements ConceptDescriptionRepositoryFactory {
+	
+	@Value("${basyx.cdrepo.name:cd-repo}")
+	private String cdRepositoryName;
 
 	@Override
 	public ConceptDescriptionRepository create() {
-		return new InMemoryConceptDescriptionRepository();
+		return new InMemoryConceptDescriptionRepository(cdRepositoryName);
 	}
 
 }
diff --git a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepository.java b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepository.java
index 50ec17c..f6f7bfb 100644
--- a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepository.java
+++ b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepository.java
@@ -33,7 +33,6 @@ import org.eclipse.digitaltwin.aas4j.v3.model.Reference;
 import org.eclipse.digitaltwin.basyx.core.exceptions.CollidingIdentifierException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.ElementDoesNotExistException;
 import org.eclipse.digitaltwin.basyx.core.exceptions.IdentificationMismatchException;
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.data.mongodb.core.MongoTemplate;
 import org.springframework.data.mongodb.core.index.TextIndexDefinition;
 import org.springframework.data.mongodb.core.query.Criteria;
@@ -53,8 +52,6 @@ public class MongoDBConceptDescriptionRepository implements ConceptDescriptionRe
 
 	private MongoTemplate mongoTemplate;
 	private String collectionName;
-	
-	@Value("${basyx.cdrepo.name:cd-repo}")
 	private String cdRepositoryName;
 
 	public MongoDBConceptDescriptionRepository(MongoTemplate mongoTemplate, String collectionName) {
@@ -62,6 +59,11 @@ public class MongoDBConceptDescriptionRepository implements ConceptDescriptionRe
 		this.collectionName = collectionName;
 		configureIndexForConceptDescriptionId(mongoTemplate);
 	}
+	
+	public MongoDBConceptDescriptionRepository(MongoTemplate mongoTemplate, String collectionName, String cdRepositoryName) {
+		this(mongoTemplate, collectionName);
+		this.cdRepositoryName = cdRepositoryName;
+	}
 
 	@Override
 	public Collection<ConceptDescription> getAllConceptDescriptions() {
@@ -130,7 +132,7 @@ public class MongoDBConceptDescriptionRepository implements ConceptDescriptionRe
 	
 	@Override
 	public String getName() {
-		return cdRepositoryName;
+		return cdRepositoryName == null ? ConceptDescriptionRepository.super.getName() : cdRepositoryName;
 	}
 	
 	private void configureIndexForConceptDescriptionId(MongoTemplate mongoTemplate) {
diff --git a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepositoryFactory.java b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepositoryFactory.java
index f8b4998..0db0d98 100644
--- a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepositoryFactory.java
+++ b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/MongoDBConceptDescriptionRepositoryFactory.java
@@ -23,7 +23,6 @@
  * SPDX-License-Identifier: MIT
  ******************************************************************************/
 
-
 package org.eclipse.digitaltwin.basyx.conceptdescriptionrepository;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -33,25 +32,30 @@ import org.springframework.data.mongodb.core.MongoTemplate;
 import org.springframework.stereotype.Component;
 
 /**
- * ConceptDescriptionRepository factory returning a MongoDb backend ConceptDescriptionRepository
+ * ConceptDescriptionRepository factory returning a MongoDb backend
+ * ConceptDescriptionRepository
  * 
  * @author schnicke, danish
  */
 @Component
 @ConditionalOnExpression("'${basyx.backend}'.equals('MongoDB')")
 public class MongoDBConceptDescriptionRepositoryFactory implements ConceptDescriptionRepositoryFactory {
-	
+
 	private MongoTemplate mongoTemplate;
 	private String collectionName;
 	
+	@Value("${basyx.cdrepo.name:cd-repo}")
+	private String cdRepositoryName;
+
 	@Autowired
-	public MongoDBConceptDescriptionRepositoryFactory(MongoTemplate mongoTemplate, @Value("${basyx.conceptdescriptionrepository.mongodb.collectionName:conceptdescription-repo}") String collectionName) {
+	public MongoDBConceptDescriptionRepositoryFactory(MongoTemplate mongoTemplate,
+			@Value("${basyx.conceptdescriptionrepository.mongodb.collectionName:conceptdescription-repo}") String collectionName) {
 		this.mongoTemplate = mongoTemplate;
 		this.collectionName = collectionName;
 	}
 
 	@Override
 	public ConceptDescriptionRepository create() {
-		return new MongoDBConceptDescriptionRepository(mongoTemplate, collectionName);
+		return new MongoDBConceptDescriptionRepository(mongoTemplate, collectionName, cdRepositoryName);
 	}
 }
diff --git a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBConceptDescriptionRepository.java b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBConceptDescriptionRepository.java
index cbe1297..4046fd8 100644
--- a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBConceptDescriptionRepository.java
+++ b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/aasrepository/TestMongoDBConceptDescriptionRepository.java
@@ -121,7 +121,7 @@ public class TestMongoDBConceptDescriptionRepository extends ConceptDescriptionR
 	}
 	
 	private MongoTemplate createTemplate() {
-		String connectionURL = "mongodb://mongoAdmin:mongoPassword@localhost:27017/";
+		String connectionURL = "mongodb://localhost:27017";
 		MongoClient client = MongoClients.create(connectionURL);
 		MongoTemplate template = new MongoTemplate(client, "BaSyxTestDb");
 		
diff --git a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/ConceptDescriptionRepository.java b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/ConceptDescriptionRepository.java
index 0cb6d44..8de1e64 100644
--- a/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/ConceptDescriptionRepository.java
+++ b/basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/conceptdescriptionrepository/ConceptDescriptionRepository.java
@@ -108,6 +108,8 @@ public interface ConceptDescriptionRepository {
 	/**
 	 * Returns the name of the ConceptDescription repository
 	 */
-	public String getName();
+	public default String getName() {
+		return "cd-repo";
+	}
 	
 }
diff --git a/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepository.java b/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepository.java
index 58ff98c..7829341 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepository.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepository.java
@@ -41,7 +41,6 @@ import org.eclipse.digitaltwin.basyx.submodelservice.SubmodelService;
 import org.eclipse.digitaltwin.basyx.submodelservice.SubmodelServiceFactory;
 import org.eclipse.digitaltwin.basyx.submodelservice.value.SubmodelElementValue;
 import org.eclipse.digitaltwin.basyx.submodelservice.value.SubmodelValueOnly;
-import org.springframework.beans.factory.annotation.Value;
 
 /**
  * In-memory implementation of the SubmodelRepository
@@ -53,8 +52,6 @@ public class InMemorySubmodelRepository implements SubmodelRepository {
 
 	private Map<String, SubmodelService> submodelServices = new LinkedHashMap<>();
 	private SubmodelServiceFactory submodelServiceFactory;
-	
-	@Value("${basyx.smrepo.name:sm-repo}")
 	private String smRepositoryName;
 
 	/**
@@ -66,6 +63,18 @@ public class InMemorySubmodelRepository implements SubmodelRepository {
 	public InMemorySubmodelRepository(SubmodelServiceFactory submodelServiceFactory) {
 		this.submodelServiceFactory = submodelServiceFactory;
 	}
+	
+	/**
+	 * Creates the InMemorySubmodelRepository utilizing the passed
+	 * SubmodelServiceFactory for creating new SubmodelServices
+	 * 
+	 * @param submodelServiceFactory
+	 * @param smRepositoryName
+	 */
+	public InMemorySubmodelRepository(SubmodelServiceFactory submodelServiceFactory, String smRepositoryName) {
+		this(submodelServiceFactory);
+		this.smRepositoryName = smRepositoryName;
+	}
 
 	/**
 	 * Creates the InMemorySubmodelRepository utilizing the passed
@@ -81,6 +90,21 @@ public class InMemorySubmodelRepository implements SubmodelRepository {
 
 		submodelServices = createServices(submodels);
 	}
+	
+	/**
+	 * Creates the InMemorySubmodelRepository utilizing the passed
+	 * SubmodelServiceFactory for creating new SubmodelServices and preconfiguring
+	 * it with the passed Submodels
+	 * 
+	 * @param submodelServiceFactory
+	 * @param submodels
+	 * @param smRepositoryName
+	 */
+	public InMemorySubmodelRepository(SubmodelServiceFactory submodelServiceFactory, Collection<Submodel> submodels, String smRepositoryName) {
+		this(submodelServiceFactory, submodels);
+		
+		this.smRepositoryName = smRepositoryName;
+	}
 
 	private void throwIfHasCollidingIds(Collection<Submodel> submodelsToCheck) {
 		Set<String> ids = new HashSet<>();
@@ -220,7 +244,7 @@ public class InMemorySubmodelRepository implements SubmodelRepository {
 	
 	@Override
 	public String getName() {
-		return smRepositoryName;
+		return smRepositoryName == null ? SubmodelRepository.super.getName() : smRepositoryName;
 	}
 
 	private void throwIfMismatchingIds(String smId, Submodel newSubmodel) {
diff --git a/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepositoryFactory.java b/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepositoryFactory.java
index 9566aaa..94407c7 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepositoryFactory.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-backend-inmemory/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/InMemorySubmodelRepositoryFactory.java
@@ -26,6 +26,7 @@ package org.eclipse.digitaltwin.basyx.submodelrepository;
 
 import org.eclipse.digitaltwin.basyx.submodelservice.SubmodelServiceFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.stereotype.Component;
 
@@ -38,6 +39,9 @@ import org.springframework.stereotype.Component;
 @Component
 public class InMemorySubmodelRepositoryFactory implements SubmodelRepositoryFactory {
 	private SubmodelServiceFactory submodelServiceFactory;
+	
+	@Value("${basyx.smrepo.name:sm-repo}")
+	private String smRepositoryName;
 
 	@Autowired
 	public InMemorySubmodelRepositoryFactory(SubmodelServiceFactory submodelServiceFactory) {
@@ -46,7 +50,7 @@ public class InMemorySubmodelRepositoryFactory implements SubmodelRepositoryFact
 
 	@Override
 	public SubmodelRepository create() {
-		return new InMemorySubmodelRepository(submodelServiceFactory);
+		return new InMemorySubmodelRepository(submodelServiceFactory, smRepositoryName);
 	}
 
 }
diff --git a/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepository.java b/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepository.java
index 153015d..7247b15 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepository.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepository.java
@@ -35,7 +35,6 @@ import org.eclipse.digitaltwin.basyx.submodelservice.SubmodelService;
 import org.eclipse.digitaltwin.basyx.submodelservice.SubmodelServiceFactory;
 import org.eclipse.digitaltwin.basyx.submodelservice.value.SubmodelElementValue;
 import org.eclipse.digitaltwin.basyx.submodelservice.value.SubmodelValueOnly;
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.data.mongodb.core.MongoTemplate;
 import org.springframework.data.mongodb.core.index.TextIndexDefinition;
 import org.springframework.data.mongodb.core.query.Criteria;
@@ -55,8 +54,6 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	private MongoTemplate mongoTemplate;
 	private String collectionName;
 	private SubmodelServiceFactory submodelServiceFactory;
-	
-	@Value("${basyx.smrepo.name:sm-repo}")
 	private String smRepositoryName;
 
 	/**
@@ -68,13 +65,31 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	 * @param collectionName
 	 * @param submodelServiceFactory
 	 */
-	public MongoDBSubmodelRepository(MongoTemplate mongoTemplate, String collectionName, SubmodelServiceFactory submodelServiceFactory) {
+	public MongoDBSubmodelRepository(MongoTemplate mongoTemplate, String collectionName,
+			SubmodelServiceFactory submodelServiceFactory) {
 		this.mongoTemplate = mongoTemplate;
 		this.collectionName = collectionName;
 		this.submodelServiceFactory = submodelServiceFactory;
 		configureIndexForSubmodelId(mongoTemplate);
 	}
 
+	/**
+	 * Creates the MongoDBSubmodelRepository utilizing the passed
+	 * SubmodelServiceFactory for creating new SubmodelServices and uses a
+	 * collectionName and a mongoTemplate for operating MongoDB
+	 * 
+	 * @param mongoTemplate
+	 * @param collectionName
+	 * @param submodelServiceFactory
+	 * @param smRepositoryName
+	 */
+	public MongoDBSubmodelRepository(MongoTemplate mongoTemplate, String collectionName,
+			SubmodelServiceFactory submodelServiceFactory, String smRepositoryName) {
+		this(mongoTemplate, collectionName, submodelServiceFactory);
+		
+		this.smRepositoryName = smRepositoryName;
+	}
+
 	/**
 	 * Creates the MongoDBSubmodelRepository utilizing the passed
 	 * SubmodelServiceFactory for creating new SubmodelServices and uses a
@@ -84,11 +99,31 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	 * @param submodelServiceFactory
 	 * @param submodels
 	 */
-	public MongoDBSubmodelRepository(MongoTemplate mongoTemplate, String collectionName, SubmodelServiceFactory submodelServiceFactory, Collection<Submodel> submodels) {
+	public MongoDBSubmodelRepository(MongoTemplate mongoTemplate, String collectionName,
+			SubmodelServiceFactory submodelServiceFactory, Collection<Submodel> submodels) {
 		this(mongoTemplate, collectionName, submodelServiceFactory);
 		initializeRemoteCollection(submodels);
 	}
 
+	/**
+	 * Creates the MongoDBSubmodelRepository utilizing the passed
+	 * SubmodelServiceFactory for creating new SubmodelServices and uses a
+	 * collectionName and a mongoTemplate for operating MongoDB. Additionally
+	 * initializes the MongoDB collection with a collection of submodels.
+	 * 
+	 * @param mongoTemplate
+	 * @param collectionName
+	 * @param submodelServiceFactory
+	 * @param submodels
+	 * @param smRepositoryName
+	 */
+	public MongoDBSubmodelRepository(MongoTemplate mongoTemplate, String collectionName,
+			SubmodelServiceFactory submodelServiceFactory, Collection<Submodel> submodels, String smRepositoryName) {
+		this(mongoTemplate, collectionName, submodelServiceFactory, submodels);
+		
+		this.smRepositoryName = smRepositoryName;
+	}
+
 	private void initializeRemoteCollection(Collection<Submodel> submodels) {
 		if (submodels == null || submodels.isEmpty()) {
 			return;
@@ -97,11 +132,8 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	}
 
 	private void configureIndexForSubmodelId(MongoTemplate mongoTemplate) {
-		TextIndexDefinition idIndex = TextIndexDefinition.builder()
-				.onField(ID_JSON_PATH)
-				.build();
-		mongoTemplate.indexOps(Submodel.class)
-				.ensureIndex(idIndex);
+		TextIndexDefinition idIndex = TextIndexDefinition.builder().onField(ID_JSON_PATH).build();
+		mongoTemplate.indexOps(Submodel.class).ensureIndex(idIndex);
 	}
 
 	@Override
@@ -111,8 +143,8 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 
 	@Override
 	public Submodel getSubmodel(String submodelId) throws ElementDoesNotExistException {
-		Submodel submodel = mongoTemplate.findOne(new Query().addCriteria(Criteria.where(ID_JSON_PATH)
-				.is(submodelId)), Submodel.class, collectionName);
+		Submodel submodel = mongoTemplate.findOne(new Query().addCriteria(Criteria.where(ID_JSON_PATH).is(submodelId)),
+				Submodel.class, collectionName);
 		if (submodel == null) {
 			throw new ElementDoesNotExistException(submodelId);
 		}
@@ -121,8 +153,7 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 
 	@Override
 	public void updateSubmodel(String submodelId, Submodel submodel) throws ElementDoesNotExistException {
-		Query query = new Query().addCriteria(Criteria.where(ID_JSON_PATH)
-				.is(submodelId));
+		Query query = new Query().addCriteria(Criteria.where(ID_JSON_PATH).is(submodelId));
 
 		throwIfSubmodelDoesNotExist(query, submodelId);
 		throwIfMismatchingIds(submodelId, submodel);
@@ -152,8 +183,8 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	}
 
 	private void throwIfCollidesWithRemoteId(Submodel submodel) {
-		if (mongoTemplate.exists(new Query().addCriteria(Criteria.where(ID_JSON_PATH)
-				.is(submodel.getId())), Submodel.class, collectionName)) {
+		if (mongoTemplate.exists(new Query().addCriteria(Criteria.where(ID_JSON_PATH).is(submodel.getId())),
+				Submodel.class, collectionName)) {
 			throw new CollidingIdentifierException(submodel.getId());
 		}
 	}
@@ -168,17 +199,20 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	}
 
 	@Override
-	public SubmodelElement getSubmodelElement(String submodelId, String submodelElementIdShort) throws ElementDoesNotExistException {
+	public SubmodelElement getSubmodelElement(String submodelId, String submodelElementIdShort)
+			throws ElementDoesNotExistException {
 		return getSubmodelService(submodelId).getSubmodelElement(submodelElementIdShort);
 	}
 
 	@Override
-	public SubmodelElementValue getSubmodelElementValue(String submodelId, String submodelElementIdShort) throws ElementDoesNotExistException {
+	public SubmodelElementValue getSubmodelElementValue(String submodelId, String submodelElementIdShort)
+			throws ElementDoesNotExistException {
 		return getSubmodelService(submodelId).getSubmodelElementValue(submodelElementIdShort);
 	}
 
 	@Override
-	public void setSubmodelElementValue(String submodelId, String submodelElementIdShort, SubmodelElementValue value) throws ElementDoesNotExistException {
+	public void setSubmodelElementValue(String submodelId, String submodelElementIdShort, SubmodelElementValue value)
+			throws ElementDoesNotExistException {
 		SubmodelService submodelService = getSubmodelService(submodelId);
 		submodelService.setSubmodelElementValue(submodelElementIdShort, value);
 
@@ -187,8 +221,8 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 
 	@Override
 	public void deleteSubmodel(String submodelId) throws ElementDoesNotExistException {
-		DeleteResult result = mongoTemplate.remove(new Query().addCriteria(Criteria.where(ID_JSON_PATH)
-				.is(submodelId)), Submodel.class, collectionName);
+		DeleteResult result = mongoTemplate.remove(new Query().addCriteria(Criteria.where(ID_JSON_PATH).is(submodelId)),
+				Submodel.class, collectionName);
 
 		if (result.getDeletedCount() == 0) {
 			throw new ElementDoesNotExistException(submodelId);
@@ -205,7 +239,8 @@ public class MongoDBSubmodelRepository implements SubmodelRepository {
 	}
 
 	@Override
-	public void createSubmodelElement(String submodelId, String idShortPath, SubmodelElement submodelElement) throws ElementDoesNotExistException {
+	public void createSubmodelElement(String submodelId, String idShortPath, SubmodelElement submodelElement)
+			throws ElementDoesNotExistException {
 		SubmodelService submodelService = getSubmodelService(submodelId);
 		submodelService.createSubmodelElement(idShortPath, submodelElement);
 
diff --git a/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepositoryFactory.java b/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepositoryFactory.java
index 8ff561f..11c9c5b 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepositoryFactory.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/MongoDBSubmodelRepositoryFactory.java
@@ -48,18 +48,24 @@ public class MongoDBSubmodelRepositoryFactory implements SubmodelRepositoryFacto
 	private String collectionName;
 	private SubmodelServiceFactory submodelServiceFactory;
 	private Collection<Submodel> submodels;
+	
+	@Value("${basyx.smrepo.name:sm-repo}")
+	private String smRepositoryName;
 
 	@Autowired(required = false)
-	public MongoDBSubmodelRepositoryFactory(MongoTemplate mongoTemplate, @Value("${basyx.submodelrepository.mongodb.collectionName:submodel-repo}") String collectionName, SubmodelServiceFactory submodelServiceFactory) {
+	public MongoDBSubmodelRepositoryFactory(MongoTemplate mongoTemplate,
+			@Value("${basyx.submodelrepository.mongodb.collectionName:submodel-repo}") String collectionName,
+			SubmodelServiceFactory submodelServiceFactory) {
 		this.mongoTemplate = mongoTemplate;
 		this.collectionName = collectionName;
 		this.submodelServiceFactory = submodelServiceFactory;
-	}
 
+	}
 
 	@Autowired(required = false)
-	public MongoDBSubmodelRepositoryFactory(MongoTemplate mongoTemplate, @Value("${basyx.submodelrepository.mongodb.collectionName:submodel-repo}") String collectionName, SubmodelServiceFactory submodelServiceFactory,
-			Collection<Submodel> submodels) {
+	public MongoDBSubmodelRepositoryFactory(MongoTemplate mongoTemplate,
+			@Value("${basyx.submodelrepository.mongodb.collectionName:submodel-repo}") String collectionName,
+			SubmodelServiceFactory submodelServiceFactory, Collection<Submodel> submodels) {
 		this(mongoTemplate, collectionName, submodelServiceFactory);
 		this.submodels = submodels;
 	}
@@ -67,9 +73,9 @@ public class MongoDBSubmodelRepositoryFactory implements SubmodelRepositoryFacto
 	@Override
 	public SubmodelRepository create() {
 		if (this.submodels == null || this.submodels.isEmpty()) {
-			return new MongoDBSubmodelRepository(mongoTemplate, collectionName, submodelServiceFactory);
+			return new MongoDBSubmodelRepository(mongoTemplate, collectionName, submodelServiceFactory, smRepositoryName);
 		}
-		return new MongoDBSubmodelRepository(mongoTemplate, collectionName, submodelServiceFactory, submodels);
+		return new MongoDBSubmodelRepository(mongoTemplate, collectionName, submodelServiceFactory, submodels, smRepositoryName);
 
 	}
 }
diff --git a/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/submodelrepository/TestMongoDBSubmodelRepository.java b/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/submodelrepository/TestMongoDBSubmodelRepository.java
index 80eb799..040e651 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/submodelrepository/TestMongoDBSubmodelRepository.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-backend-mongodb/src/test/java/org/eclipse/digitaltwin/basyx/submodelrepository/TestMongoDBSubmodelRepository.java
@@ -37,7 +37,7 @@ import com.mongodb.client.MongoClients;
 
 public class TestMongoDBSubmodelRepository extends SubmodelRepositorySuite {
 	private final String COLLECTION = "submodelTestCollection";
-	private final String CONNECTION_URL = "mongodb://mongoAdmin:mongoPassword@localhost:27017";
+	private final String CONNECTION_URL = "mongodb://localhost:27017";
 	private final MongoClient CLIENT = MongoClients.create(CONNECTION_URL);
 	private final MongoTemplate TEMPLATE = new MongoTemplate(CLIENT, "BaSyxTestDb");
 	private final InMemorySubmodelServiceFactory SUBMODEL_SERVICE_FACTORY = new InMemorySubmodelServiceFactory();
diff --git a/basyx.submodelrepository/basyx.submodelrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/SubmodelRepository.java b/basyx.submodelrepository/basyx.submodelrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/SubmodelRepository.java
index 78f7632..a67ee85 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/SubmodelRepository.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-core/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/SubmodelRepository.java
@@ -166,7 +166,9 @@ public interface SubmodelRepository {
 	/**
 	 * Returns the name of the submodel repository
 	 */
-	public String getName();
+	public default String getName() {
+		return "sm-repo";
+	}
 
 	/**
 	 * Retrieves the Submodel as Value-Only_representation with the specific id
diff --git a/basyx.submodelrepository/basyx.submodelrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/feature/mqtt/MqttSubmodelRepository.java b/basyx.submodelrepository/basyx.submodelrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/feature/mqtt/MqttSubmodelRepository.java
index 7de3725..ec64e77 100644
--- a/basyx.submodelrepository/basyx.submodelrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/feature/mqtt/MqttSubmodelRepository.java
+++ b/basyx.submodelrepository/basyx.submodelrepository-feature-mqtt/src/main/java/org/eclipse/digitaltwin/basyx/submodelrepository/feature/mqtt/MqttSubmodelRepository.java
@@ -17,12 +17,11 @@ import org.eclipse.paho.client.mqttv3.MqttMessage;
 import org.eclipse.paho.client.mqttv3.MqttPersistenceException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Value;
 
 /**
  * Repository decorator for the MQTT eventing on the submodel level.
  * 
- * @author fischer,kammognie
+ * @author fischer, kammognie
  */
 public class MqttSubmodelRepository implements SubmodelRepository {
 	private static Logger logger = LoggerFactory.getLogger(MqttSubmodelRepository.class);
@@ -31,9 +30,6 @@ public class MqttSubmodelRepository implements SubmodelRepository {
 	private SubmodelRepository decorated;
 
 	private IMqttClient mqttClient;
-	
-	@Value("${basyx.smrepo.name:sm-repo}")
-	private String smRepositoryName;
 
 	public MqttSubmodelRepository(SubmodelRepository decorated, IMqttClient mqttClient, MqttSubmodelRepositoryTopicFactory topicFactory) {
 		this.topicFactory = topicFactory;
@@ -115,7 +111,7 @@ public class MqttSubmodelRepository implements SubmodelRepository {
 
 	@Override
 	public String getName() {
-		return smRepositoryName;
+		return decorated.getName();
 	}
 
 	@Override